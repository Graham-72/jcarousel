<?php
// $Id$

/**
 * @file
 * This module provides a central function for adding the jCarousel jQuery
 * plugin and makes sure it's added only once per page.
 *
 * Additionally, it also provides a configurable "carousel" style for use by
 * the Mini Panels module.
 */

/**
 * Add the JS, basic CSS and skin CSS files to the current page, if they
 * aren't added already.
 *
 * @param $skin
 *   The name of the skin that should be loaded. Set to NULL to load your own.
 */
function jcarousel_add($skin = 'tango') {
  static $added;
  static $skins_added;

  if (!isset($added)) {
    drupal_add_js(drupal_get_path('module', 'jcarousel') .'/jcarousel.js');
    drupal_add_css(drupal_get_path('module', 'jcarousel') .'/jcarousel.css');
    $added = TRUE;
  }
  if (isset($skin) && (!isset($skins_added) || !in_array($skin, $skins_added))) {
    drupal_add_css(drupal_get_path('module', 'jcarousel') ."/skins/$skin/skin.css"); 
  }
}


//----------------------------------------------------------------------------
// Panels hooks.

/**
 * Implementation of hook_panels_panel_style_info().
 */
function jcarousel_panels_panel_style_info() {
  return array(
    'carousel' => array(
      'label' => t('Carousel'),
      'panels implementations' => array('panels_mini'),
    ),
  );
}

/**
 * Implementation of hook_panels_panel_style_settings().
 */
function jcarousel_panels_panel_style_settings($style, $op, $panel_settings) {
  switch ($style) {
    case 'carousel':
      switch ($op) {
        case 'form':
          $style_settings = $panel_settings['style_settings'];

          $form = array();
          $form['orientation'] = array(
            '#type' => 'select',
            '#title' => t('Orientation'),
            '#options' => array('horizontal' => t('Horizontal'), 'vertical' => t('Vertical')),
            '#description' => t(
              'Specifies wether the carousel appears in horizontal or vertical
              orientation. Changes the carousel from a left/right style to a
              up/down style carousel.'
            ),
            '#default_value' => (isset($style_settings['orientation'])) ? $style_settings['orientation'] : 'horizontal',
          );
          $form['visible'] = array(
            '#type' => 'textfield',
            '#title' => t('Visible items'),
            '#description' => t('The number of items that will be visible.'),
            '#size' => 5,
            '#default_value' => (isset($style_settings['visible'])) ? $style_settings['visible'] : 1,
          );
          $form['scroll'] = array(
            '#type' => 'textfield',
            '#title' => t('Scrolled items'),
            '#description' => t('The number of items to scroll by.'),
            '#size' => 5,
            '#default_value' => (isset($style_settings['scroll'])) ? $style_settings['scroll'] : 1,
          );
          $form['auto'] = array(
            '#type' => 'textfield',
            '#title' => t('Autoscroll'),
            '#size' => 5,
            '#description' => t(
              'Specifies how many seconds to periodically autoscroll the
              content. If set to 0 (default) then autoscrolling is turned
              off.'
            ),
            '#default_value' => (isset($style_settings['auto'])) ? $style_settings['auto'] : 0,
          );
          $form['animation'] = array(
            '#type' => 'textfield',
            '#title' => t('Animation speed'),
            '#size' => 10,
            '#description' => t(
              'The speed of the scroll animation in milliseconds. If set to 0,
              animation is turned off.'
            ),
            '#default_value' => (isset($style_settings['animation'])) ? $style_settings['animation'] : 750,
          );
          $form['wrap'] = array(
            '#type' => 'select',
            '#title' => t('Wrap style'),
            '#description' => t(
              'Specifies whether to wrap at the first/last item (or both) and
              jump back to the start/end. Options are "first", "last" or
              "both" as string. For a circular carousel, choose "circular".'
            ),
            '#options' => array(
              'none' => t('None'),
              'first' => t('First'),
              'last' => t('Last'),
              'both' => t('Both'),
              'circular' => t('Circular'),
            ),
            '#default_value' => (isset($style_settings['wrap'])) ? $style_settings['wrap'] : 'none',
          );
          return $form;

        case 'validate':
          // Extremely ugly, yet necessary, because the style settings form
          // is embedded in another form.
          $name_prefix = 'panel_settings][style_settings][';

          $style_settings = $panel_settings['style_settings'];
          if (!is_numeric($style_settings['animation']) || $style_settings['animation'] < 0) {
            form_set_error($name_prefix .'animation', t('The speed animation setting must be numeric and cannot be negative.'));
          }
          if (!is_numeric($style_settings['auto']) || $style_settings['auto'] < 0) {
            form_set_error($name_prefix .'auto', t('The autoscroll setting must be numeric and cannot be negative.'));
          }
          if (!in_array($style_settings['orientation'], array('horizontal', 'vertical'))) {
            form_set_error($name_prefix .'orientation', t('The orientation is invalid, it must be either <em>horizontal</em> or <em>vertical</em>.'));
          }
          if (!is_numeric($style_settings['scroll']) || $style_settings['scroll'] < 1) {
            form_set_error($name_prefix .'scroll', t('The number of items to scroll by must be numeric and at least 1.'));
          }
          if (!is_numeric($style_settings['visible'] || $style_settings['visible']) < 1) {
            form_set_error($name_prefix .'visible', t('The number of visible items must be numeric and at least 1.'));
          }
          break;

      }
  }
}

/**
 * Implementation of hook_panels_panel_style_render().
 */
function jcarousel_panels_panel_style_render($style, $panel_id, $panes, $display) {
  $output = '';

  $panel_settings = unserialize($display->panel_settings);
  $style_settings = $panel_settings['style_settings'];

  // Add the JavaScript to make jCarousel do its thing!
  jcarousel_add('tango_panels');
  drupal_add_js(drupal_get_path('module', 'jcarousel') .'/jcarousel_panels.js');

  switch ($style) {
    case 'carousel':
      drupal_add_js(
        array(
          'jcarousel' => array(
            $panel_id => array(
              'selector' => "#panel_mini_$panel_id",
              'settings' => array(
                'animation' => (isset($style_settings['animation'])) ? intval($style_settings['animation']) : 750,
                'auto' => (isset($style_settings['auto'])) ? intval($style_settings['auto']) : 0,
                'easing' => 'QuartEaseOut',
                'scroll' => (isset($style_settings['scroll'])) ? intval($style_settings['scroll']) : 1,
                'vertical' => ($style_settings['orientation'] == 'vertical'),
                'visible' => (isset($style_settings['visible'])) ? intval($style_settings['visible']) : 1,
                'wrap' => ($style_settings['wrap'] != 'none') ? $style_settings['wrap'] : NULL,
              ),
            ),
          ),
        ),
        'setting'
      );

      $items = array();

      // Render the items of the carousel.
      foreach ($panes as $pane_id => $pane) {
        $items[] = theme('panels_pane', $pane, $display);
      }
      $output .= theme('item_list', $items, NULL, 'ul', array('id' => "panel_mini_$panel_id", 'class' => 'jcarousel jcarousel-skin-tango_panels'));
      break;
  }
  
  return $output;
}
